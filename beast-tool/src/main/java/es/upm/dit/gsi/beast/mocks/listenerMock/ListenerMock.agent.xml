<?xml version="1.0" encoding="UTF-8"?>
<!--
	<H3>Listener Mock.</H3>
	The purpose of this agent is to publish a df_service to listen messages from othes agents

-->
<agent xmlns="http://jadex.sourceforge.net/jadex"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://jadex.sourceforge.net/jadex
	                    http://jadex.sourceforge.net/jadex-bdi-2.0.xsd"
	name="ListenerMock"
	package="es.upm.dit.gsi.beast.mocks.listenerMock">

	<imports>
		<import>jadex.base.fipa.*</import>
		<import>jadex.commons.*</import>
		<import>jadex.bridge.service.*</import>
		<import>jadex.commons.future.*</import>
		<import>java.util.*</import>
		<import>es.upm.dit.gsi.beast.mocks.common.*</import>
	</imports>

	<capabilities>
		<!-- Include the df capability as dfcap for finding other agents
			and registering its carry service. -->
		<capability name="dfcap" file="jadex.bdi.planlib.df.DF"/>
	</capabilities>

	<beliefs>
		<belief name="agent_behaviour" class="AgentBehaviour"/>
		<belief name="message_count" class="int">
			<fact>0</fact>
		</belief>
	</beliefs>

	<plans>
		<plan name="renameDF">
			<body class="SetupPlan"/>
			<trigger>
				<messageevent ref="renameDF"/>
			</trigger>
		</plan>
		<!-- Main service plan that handles action requests. -->
		<plan name="listen">
			<body class="ListenPlan"/>
			<trigger>
				<messageevent ref="request"/>
			</trigger>
		</plan>
	</plans>

	<events>
		<messageevent name="renameDF" type="fipa" direction="receive">
			<parameter name="performative" class="String" direction="fixed">
				<value>SFipa.INFORM</value>
			</parameter>
			<match>$content instanceof MockConfiguration</match>
		</messageevent>
		
		<messageevent name="request" type="fipa" direction="receive">
			<parameter name="performative" class="String" direction="fixed">
				<value>SFipa.INFORM</value>
			</parameter>
		</messageevent>
		<!-- 
		<messageevent name="request" type="fipa" direction="receive">
			<parameter name="performative" class="String" direction="fixed">
				<value>SFipa.REQUEST</value>
			</parameter>
		</messageevent> -->

		<messageevent name="send_inform" type="fipa" direction="send">
			<parameter name="performative" class="String" direction="fixed">
				<value>SFipa.INFORM</value>
			</parameter>
		</messageevent>
	</events>
	
	<properties>
		<!--<property name="debugging">false</property>
		<property name="logging.level">Level.INFO</property>-->
		<property name="debugging">false</property>
		<property name="dfservice" class="IFuture">SServiceProvider.getService($scope.getServiceProvider(), IDF.class, RequiredServiceInfo.SCOPE_PLATFORM)</property>
    </properties>

	<configurations>
		<configuration name="default">
			<goals>
				<!-- Create a goal for registering and keeping registerd at the df. -->
				<initialgoal cref="dfcap.df_register">
					<parameter ref="description">
						<value>
							$properties.dfservice.createDFComponentDescription(null, 
								$properties.dfservice.createDFServiceDescription("mock_agent", "mock_agent", "Universidad Polit√©cnica de Madrid"))
						</value>
					</parameter>
				</initialgoal>
				<endgoal cref="dfcap.df_deregister"/>
			</goals>
		</configuration>
	</configurations>

</agent>
